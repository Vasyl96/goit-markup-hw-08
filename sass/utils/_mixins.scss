
// Mixin for adaptive

@mixin for-size($range) {
    $mobile: 480px;
    $tablet: 768px;
    $desktop: 1200px;

    @if $range ==mobile-only {
        @media (max-width: #{$mobile}) {
            @content;
        }
    }

    @else if $range ==mobile {
        @media (min-width: $mobile) {
            @content;
        }
    }

    @else if $range ==tablet {
        @media (min-width: $tablet) {
            @content;
        }
    }

    @else if $range ==before-tablet {
        @media (max-width: #{$tablet - 1}) {
            @content;
        }
    }

    @else if $range ==desktop {
        @media (min-width: $desktop) {
            @content;
        }
    }

    @else if $range ==before-desktop {
        @media (max-width: #{$desktop - 1}) {
            @content;
        }
    }}


// Mixin for flexbox

@mixin flexbox($type: flex, $ai: center, $jc: center, $fd: column) {
    display: $type;
    align-items: $ai;
    justify-content: $jc;
    flex-direction: $fd;
}



// Mixin for font

@mixin font($fs: 14px, $fw: 400, $lh: 24px, $ls: 0.02em) {
    font-size: $fs;
    font-weight: $fw;
    line-height: decimal-round($lh / $fs, 2);
    letter-spacing: $ls;
}

// Decimal-round

@function decimal-round($number, $digits: 0, $mode: round) {
    $n: 1;

    // $number must be a number
    @if type-of($number) !=number {
        @warn '#{ $number } is not a number.';
        @return $number;
    }

    // $digits must be a unitless number
    @if type-of($digits) !=number {
        @warn '#{ $digits } is not a number.';
        @return $number;
    }

    @else if not unitless($digits) {
        @warn '#{ $digits } has a unit.';
        @return $number;
    }

    @if $digits >0 {
        @for $i from 1 through $digits {
            $n: $n * 10;
        }
    }

    @if $mode ==round {
        @return round($number * $n) / $n;
    }

    @else if $mode ==ceil {
        @return ceil($number * $n) / $n;
    }

    @else if $mode ==floor {
        @return floor($number * $n) / $n;
    }

    @else {
        @warn '#{ $mode } is undefined keyword.';
        @return $number;
    }
}